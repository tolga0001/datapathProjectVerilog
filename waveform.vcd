$date
	Sun May 26 01:10:24 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mytest $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module cpu $end
$var wire 32 $ dataa [31:0] $end
$var wire 32 % datab [31:0] $end
$var wire 32 & jmxorxor [31:0] $end
$var wire 32 ' nandiresult [31:0] $end
$var wire 1 ( pcsrc $end
$var wire 1 ) zout $end
$var wire 32 * zeroextimm [31:0] $end
$var wire 32 + sum [31:0] $end
$var wire 1 , status_write_sig $end
$var wire 3 - status [2:0] $end
$var wire 32 . shiftedjump32 [31:0] $end
$var wire 28 / shiftedjump28 [27:0] $end
$var wire 32 0 shifteddpack [31:0] $end
$var wire 32 1 sextad [31:0] $end
$var wire 1 2 regwrite $end
$var wire 1 3 regdest $end
$var wire 5 4 outregdst [4:0] $end
$var wire 32 5 outnandimux [31:0] $end
$var wire 32 6 outjmxormux [31:0] $end
$var wire 32 7 outjmxoraddress [31:0] $end
$var wire 32 8 outjalpcmux [31:0] $end
$var wire 32 9 outcombinedmux [31:0] $end
$var wire 32 : outbrvmux [31:0] $end
$var wire 32 ; outblezalmux [31:0] $end
$var wire 32 < outbalvmux [31:0] $end
$var wire 32 = out3 [31:0] $end
$var wire 32 > out2 [31:0] $end
$var wire 5 ? out1 [4:0] $end
$var wire 1 @ nandisig $end
$var wire 1 A memwrite $end
$var wire 1 B memtoreg $end
$var wire 1 C memread $end
$var wire 1 D jmxorsig $end
$var wire 1 E jalpcsig $end
$var wire 32 F instruc [31:0] $end
$var wire 6 G inst31_26 [5:0] $end
$var wire 5 H inst25_21 [4:0] $end
$var wire 26 I inst25_0 [25:0] $end
$var wire 5 J inst20_16 [4:0] $end
$var wire 5 K inst15_11 [4:0] $end
$var wire 16 L inst15_0 [15:0] $end
$var wire 3 M gout [2:0] $end
$var wire 6 N functcode [5:0] $end
$var wire 32 O extad [31:0] $end
$var wire 32 P dpack [31:0] $end
$var wire 1 Q brvsig $end
$var wire 1 R branch $end
$var wire 1 S blezalsig $end
$var wire 1 T blezaland $end
$var wire 1 U balvsig $end
$var wire 1 V alusrc $end
$var wire 1 W aluop1 $end
$var wire 1 X aluop0 $end
$var wire 32 Y adder2out [31:0] $end
$var wire 32 Z adder1out [31:0] $end
$var reg 1 [ clk $end
$var reg 32 \ pc [31:0] $end
$var reg 3 ] statusregister [2:0] $end
$var integer 32 ^ i [31:0] $end
$scope module acont $end
$var wire 1 _ f0 $end
$var wire 1 ` f1 $end
$var wire 1 a f2 $end
$var wire 1 b f3 $end
$var wire 1 c f4 $end
$var wire 1 W aluop1 $end
$var wire 1 X aluop0 $end
$var reg 3 d gout [2:0] $end
$upscope $end
$scope module add1 $end
$var wire 32 e a [31:0] $end
$var wire 32 f b [31:0] $end
$var wire 32 g out [31:0] $end
$upscope $end
$scope module add2 $end
$var wire 32 h a [31:0] $end
$var wire 32 i out [31:0] $end
$var wire 32 j b [31:0] $end
$upscope $end
$scope module alu1 $end
$var wire 32 k a [31:0] $end
$var wire 3 l gin [2:0] $end
$var wire 32 m b [31:0] $end
$var reg 32 n less [31:0] $end
$var reg 3 o status [2:0] $end
$var reg 32 p sum [31:0] $end
$var reg 1 ) zout $end
$upscope $end
$scope module balvmux $end
$var wire 32 q i1 [31:0] $end
$var wire 1 r s0 $end
$var wire 32 s out [31:0] $end
$var wire 32 t i0 [31:0] $end
$upscope $end
$scope module balvregdst $end
$var wire 5 u i1 [4:0] $end
$var wire 1 v s0 $end
$var wire 5 w out [4:0] $end
$var wire 5 x i0 [4:0] $end
$upscope $end
$scope module blezalmux $end
$var wire 32 y i0 [31:0] $end
$var wire 32 z i1 [31:0] $end
$var wire 1 { s0 $end
$var wire 32 | out [31:0] $end
$upscope $end
$scope module brvmux $end
$var wire 32 } i0 [31:0] $end
$var wire 32 ~ i1 [31:0] $end
$var wire 1 !" s0 $end
$var wire 32 "" out [31:0] $end
$upscope $end
$scope module combineddatawritemux $end
$var wire 32 #" i1 [31:0] $end
$var wire 1 $" s0 $end
$var wire 32 %" out [31:0] $end
$var wire 32 &" i0 [31:0] $end
$upscope $end
$scope module cont $end
$var wire 1 W aluop1 $end
$var wire 1 X aluop2 $end
$var wire 1 V alusrc $end
$var wire 1 U balvsig $end
$var wire 1 '" beq $end
$var wire 1 S blezalsig $end
$var wire 1 R branch $end
$var wire 1 Q brvsig $end
$var wire 6 (" functcode [5:0] $end
$var wire 6 )" in [5:0] $end
$var wire 1 E jalpcsig $end
$var wire 1 D jmxorsig $end
$var wire 1 *" lw $end
$var wire 1 C memread $end
$var wire 1 B memtoreg $end
$var wire 1 A memwrite $end
$var wire 1 @ nandisig $end
$var wire 1 3 regdest $end
$var wire 1 2 regwrite $end
$var wire 1 , status_write_sig $end
$var wire 1 +" sw $end
$var wire 1 ," rformat $end
$upscope $end
$scope module jalpcmux $end
$var wire 32 -" i0 [31:0] $end
$var wire 32 ." i1 [31:0] $end
$var wire 1 E s0 $end
$var wire 32 /" out [31:0] $end
$upscope $end
$scope module jmxoraddressmux $end
$var wire 32 0" i0 [31:0] $end
$var wire 32 1" i1 [31:0] $end
$var wire 1 D s0 $end
$var wire 32 2" out [31:0] $end
$upscope $end
$scope module jmxormux $end
$var wire 32 3" i0 [31:0] $end
$var wire 32 4" i1 [31:0] $end
$var wire 1 D s0 $end
$var wire 32 5" out [31:0] $end
$upscope $end
$scope module mult1 $end
$var wire 5 6" i0 [4:0] $end
$var wire 5 7" i1 [4:0] $end
$var wire 1 3 s0 $end
$var wire 5 8" out [4:0] $end
$upscope $end
$scope module mult2 $end
$var wire 32 9" i0 [31:0] $end
$var wire 1 V s0 $end
$var wire 32 :" out [31:0] $end
$var wire 32 ;" i1 [31:0] $end
$upscope $end
$scope module mult3 $end
$var wire 32 <" i0 [31:0] $end
$var wire 32 =" i1 [31:0] $end
$var wire 1 B s0 $end
$var wire 32 >" out [31:0] $end
$upscope $end
$scope module nandimux $end
$var wire 32 ?" i0 [31:0] $end
$var wire 32 @" i1 [31:0] $end
$var wire 1 @ s0 $end
$var wire 32 A" out [31:0] $end
$upscope $end
$scope module sext $end
$var wire 16 B" in1 [15:0] $end
$var wire 32 C" out1 [31:0] $end
$upscope $end
$scope module shift2 $end
$var wire 32 D" shin [31:0] $end
$var wire 32 E" shout [31:0] $end
$upscope $end
$scope module shift2jump $end
$var wire 26 F" shin [25:0] $end
$var wire 28 G" shout [27:0] $end
$upscope $end
$scope module zext $end
$var wire 16 H" in1 [15:0] $end
$var wire 32 I" out1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b100010 I"
b100010 H"
b100001001000000000010001000 G"
b1000010010000000000100010 F"
b10001000 E"
b100010 D"
b100010 C"
b100010 B"
b100 A"
b11111111111111111111111111111101 @"
b100 ?"
b11111111111111111111111111111100 >"
b10 ="
b11111111111111111111111111111100 <"
b100010 ;"
b10110 :"
b10110 9"
b0 8"
b0 7"
b1001 6"
b1000 5"
b1000 4"
b100 3"
b100 2"
b100 1"
b11111111111111111111111111111100 0"
b100 /"
b10001100 ."
b100 -"
1,"
0+"
0*"
b0 )"
b100010 ("
0'"
b11111111111111111111111111111100 &"
b100 %"
1$"
b100 #"
b100 ""
0!"
b10010 ~
b100 }
b100 |
0{
b10001100 z
b100 y
b0 x
b11111 w
1v
b11111 u
b100 t
b100 s
0r
b100001001000000000010001000 q
b11111111111111111111111111111100 p
b100 o
bx n
b10110 m
b110 l
b10010 k
b10001000 j
b10001100 i
b100 h
b100 g
b100 f
b0 e
b110 d
0c
0b
0a
1`
0_
b11111 ^
bx ]
b0 \
0[
b100 Z
b10001100 Y
0X
1W
0V
0U
0T
0S
0R
0Q
b10 P
b100010 O
b100010 N
b110 M
b100010 L
b0 K
b1001 J
b1000010010000000000100010 I
b1000 H
b0 G
b1000010010000000000100010 F
0E
1D
1C
0B
0A
0@
b0 ?
b10110 >
b11111111111111111111111111111100 =
b100 <
b100 ;
b100 :
b100 9
b100 8
b100 7
b1000 6
b100 5
b11111 4
13
12
b10001000 1
b1000 0
b100001001000000000010001000 /
b100001001000000000010001000 .
b100 -
0,
b11111111111111111111111111111100 +
b100010 *
0)
0(
b11111111111111111111111111111101 '
b100 &
b10110 %
b10010 $
bx #
1"
0!
$end
#5
1!
b100000 #
0"
#10
0!
#15
1!
#20
0!
1[
#25
1!
#30
0!
#35
1!
#40
1,
b1101 4
b1101 w
b1100 6
b1100 5"
0C
0$"
0v
bx00 0
bx00 4"
0D
b110011 =
b110011 &"
b110011 >"
bx P
bx ="
b110011 7
b110011 2"
b11111111111111111111111111111111 '
b11111111111111111111111111111111 @"
b1100 8
b1100 /"
b1100 3"
b110011 +
b110011 p
b110011 0"
b110011 <"
b0 -
b0 o
b110011 &
b110011 1"
b100010 >
b100010 m
b100010 :"
b1101 ?
b1101 x
b1101 8"
b11010000010000000 1
b11010000010000000 j
b11010000010000000 E"
b10 M
b10 d
b10 l
b1100 :
b1100 ""
b1100 -"
b10001 $
b10001 k
b10001 ~
b1110 H
b100010 %
b100010 9"
b1111 J
b1111 6"
b1101 K
b1101 7"
b110100000100000 L
b111001111011010000010000000 .
b111001111011010000010000000 q
b111001111011010000010000000 /
b111001111011010000010000000 G"
b1110011110110100000100000 I
b1110011110110100000100000 F"
b100000 N
b100000 ("
b110100000100000 *
b110100000100000 I"
b110100000100000 H"
b110100000100000 O
b110100000100000 ;"
b110100000100000 C"
b110100000100000 D"
b110100000100000 B"
0`
b1100 <
b1100 s
b1100 }
b110011 5
b110011 A"
b1110011110110100000100000 F
b1100 ;
b1100 t
b1100 |
b110011 9
b110011 %"
b110011 ?"
0!
0[
b11010000010001100 Y
b11010000010001100 i
b11010000010001100 z
b11010000010001100 ."
b1100 Z
b1100 g
b1100 h
b1100 y
b1100 #"
b1000 \
b1000 e
#45
1!
#50
0!
#55
1!
#60
b0 ]
0!
1[
#65
1!
#70
0!
#75
1!
#80
xT
xQ
xV
xB
x*"
xA
x+"
x{
xE
xS
xU
x@
x2
x(
xR
xX
x'"
bx 5
bx A"
xC
x$"
xv
bx 9
bx %"
bx ?"
xD
bx 6
bx 5"
x,
bx 7
bx 2"
bx =
bx &"
bx >"
bx 4
bx w
b1111111111111111xxxxxxxxxxxxxxxx '
b1111111111111111xxxxxxxxxxxxxxxx @"
bx 8
bx /"
bx 3"
bx0 -
bx0 o
x)
bx +
bx p
bx 0"
bx <"
bx &
bx 1"
bx >
bx m
bx :"
bx ?
bx x
bx 8"
bx00 1
bx00 j
bx00 E"
bx :
bx ""
bx -"
bx G
xW
x3
x,"
bx )"
bx $
bx k
bx ~
bx H
bx %
bx 9"
bx J
bx 6"
bx K
bx 7"
bx L
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 .
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 q
bx00 /
bx00 G"
bx I
bx F"
bx N
bx ("
b0xxxxxxxxxxxxxxxx *
b0xxxxxxxxxxxxxxxx I"
bx H"
bx O
bx ;"
bx C"
bx D"
bx B"
xc
xb
xa
x`
x_
bx <
bx s
bx }
bx F
bx ;
bx t
bx |
0!
0[
bx Y
bx i
bx z
bx ."
b10000 Z
b10000 g
b10000 h
b10000 y
b10000 #"
b1100 \
b1100 e
#85
1!
#90
0!
#95
1!
#100
x!"
bx0 ]
0!
1[
#105
1!
#110
0!
#115
1!
#120
0!
0[
bx Z
bx g
bx h
bx y
bx #"
bx \
bx e
#125
1!
#130
0!
#135
1!
#140
0!
1[
#145
1!
#150
0!
#155
1!
#160
0!
0[
#165
1!
#170
0!
#175
1!
#180
0!
1[
#185
1!
#190
0!
#195
1!
#200
0!
0[
#205
1!
#210
0!
#215
1!
#220
0!
1[
#225
1!
#230
0!
#235
1!
#240
0!
0[
#245
1!
#250
0!
#255
1!
#260
0!
1[
#265
1!
#270
0!
#275
1!
#280
0!
0[
#285
1!
#290
0!
#295
1!
#300
0!
1[
#305
1!
#310
0!
#315
1!
#320
0!
0[
#325
1!
#330
0!
#335
1!
#340
0!
1[
#345
1!
#350
0!
#355
1!
#360
0!
0[
#365
1!
#370
0!
#375
1!
#380
0!
1[
#385
1!
#390
0!
#395
1!
b100000 #
#400
0!
0[
