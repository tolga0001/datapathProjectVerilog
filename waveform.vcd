$date
	Sat May 25 22:52:10 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mytest $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module cpu $end
$var wire 32 $ dataa [31:0] $end
$var wire 32 % datab [31:0] $end
$var wire 32 & nandiresult [31:0] $end
$var wire 1 ' pcsrc $end
$var wire 1 ( zout $end
$var wire 32 ) zeroextimm [31:0] $end
$var wire 32 * sum [31:0] $end
$var wire 1 + status_write_sig $end
$var wire 3 , status [2:0] $end
$var wire 32 - shiftedjump32 [31:0] $end
$var wire 28 . shiftedjump28 [27:0] $end
$var wire 32 / sextad [31:0] $end
$var wire 1 0 regwrite $end
$var wire 1 1 regdest $end
$var wire 32 2 outnandimux [31:0] $end
$var wire 32 3 outjalpcmux [31:0] $end
$var wire 32 4 outcombinedmux [31:0] $end
$var wire 32 5 outbrvmux [31:0] $end
$var wire 32 6 outblezalmux [31:0] $end
$var wire 5 7 outbalvregdst [4:0] $end
$var wire 32 8 outbalvmux [31:0] $end
$var wire 32 9 out3 [31:0] $end
$var wire 32 : out2 [31:0] $end
$var wire 5 ; out1 [4:0] $end
$var wire 1 < nandisig $end
$var wire 1 = memwrite $end
$var wire 1 > memtoreg $end
$var wire 1 ? memread $end
$var wire 1 @ jalpcsig $end
$var wire 32 A instruc [31:0] $end
$var wire 6 B inst31_26 [5:0] $end
$var wire 5 C inst25_21 [4:0] $end
$var wire 26 D inst25_0 [25:0] $end
$var wire 5 E inst20_16 [4:0] $end
$var wire 5 F inst15_11 [4:0] $end
$var wire 16 G inst15_0 [15:0] $end
$var wire 3 H gout [2:0] $end
$var wire 6 I functcode [5:0] $end
$var wire 32 J extad [31:0] $end
$var wire 32 K dpack [31:0] $end
$var wire 1 L brvsig $end
$var wire 1 M branch $end
$var wire 1 N blezalsig $end
$var wire 1 O blezaland $end
$var wire 1 P balvsig $end
$var wire 1 Q alusrc $end
$var wire 1 R aluop1 $end
$var wire 1 S aluop0 $end
$var wire 32 T adder2out [31:0] $end
$var wire 32 U adder1out [31:0] $end
$var reg 1 V clk $end
$var reg 32 W pc [31:0] $end
$var reg 3 X statusregister [2:0] $end
$var integer 32 Y i [31:0] $end
$scope module acont $end
$var wire 1 Z f0 $end
$var wire 1 [ f1 $end
$var wire 1 \ f2 $end
$var wire 1 ] f3 $end
$var wire 1 ^ f4 $end
$var wire 1 R aluop1 $end
$var wire 1 S aluop0 $end
$var reg 3 _ gout [2:0] $end
$upscope $end
$scope module add1 $end
$var wire 32 ` a [31:0] $end
$var wire 32 a b [31:0] $end
$var wire 32 b out [31:0] $end
$upscope $end
$scope module add2 $end
$var wire 32 c a [31:0] $end
$var wire 32 d out [31:0] $end
$var wire 32 e b [31:0] $end
$upscope $end
$scope module alu1 $end
$var wire 32 f a [31:0] $end
$var wire 3 g gin [2:0] $end
$var wire 32 h b [31:0] $end
$var reg 32 i less [31:0] $end
$var reg 3 j status [2:0] $end
$var reg 32 k sum [31:0] $end
$var reg 1 ( zout $end
$upscope $end
$scope module balvmux $end
$var wire 32 l i1 [31:0] $end
$var wire 1 m s0 $end
$var wire 32 n out [31:0] $end
$var wire 32 o i0 [31:0] $end
$upscope $end
$scope module balvregdst $end
$var wire 5 p i1 [4:0] $end
$var wire 1 P s0 $end
$var wire 5 q out [4:0] $end
$var wire 5 r i0 [4:0] $end
$upscope $end
$scope module blezalmux $end
$var wire 32 s i0 [31:0] $end
$var wire 32 t i1 [31:0] $end
$var wire 1 u s0 $end
$var wire 32 v out [31:0] $end
$upscope $end
$scope module brvmux $end
$var wire 32 w i0 [31:0] $end
$var wire 32 x i1 [31:0] $end
$var wire 1 y s0 $end
$var wire 32 z out [31:0] $end
$upscope $end
$scope module combineddatawritemux $end
$var wire 32 { i1 [31:0] $end
$var wire 1 | s0 $end
$var wire 32 } out [31:0] $end
$var wire 32 ~ i0 [31:0] $end
$upscope $end
$scope module cont $end
$var wire 1 R aluop1 $end
$var wire 1 S aluop2 $end
$var wire 1 Q alusrc $end
$var wire 1 P balvsig $end
$var wire 1 !" beq $end
$var wire 1 N blezalsig $end
$var wire 1 M branch $end
$var wire 1 L brvsig $end
$var wire 6 "" functcode [5:0] $end
$var wire 6 #" in [5:0] $end
$var wire 1 @ jalpcsig $end
$var wire 1 $" jmxorsig $end
$var wire 1 %" lw $end
$var wire 1 ? memread $end
$var wire 1 > memtoreg $end
$var wire 1 = memwrite $end
$var wire 1 < nandisig $end
$var wire 1 1 regdest $end
$var wire 1 0 regwrite $end
$var wire 1 + status_write_sig $end
$var wire 1 &" sw $end
$var wire 1 '" rformat $end
$upscope $end
$scope module jalpcmux $end
$var wire 32 (" i0 [31:0] $end
$var wire 32 )" i1 [31:0] $end
$var wire 1 @ s0 $end
$var wire 32 *" out [31:0] $end
$upscope $end
$scope module mult1 $end
$var wire 5 +" i0 [4:0] $end
$var wire 5 ," i1 [4:0] $end
$var wire 1 1 s0 $end
$var wire 5 -" out [4:0] $end
$upscope $end
$scope module mult2 $end
$var wire 32 ." i0 [31:0] $end
$var wire 1 Q s0 $end
$var wire 32 /" out [31:0] $end
$var wire 32 0" i1 [31:0] $end
$upscope $end
$scope module mult3 $end
$var wire 32 1" i0 [31:0] $end
$var wire 32 2" i1 [31:0] $end
$var wire 1 > s0 $end
$var wire 32 3" out [31:0] $end
$upscope $end
$scope module nandimux $end
$var wire 32 4" i0 [31:0] $end
$var wire 32 5" i1 [31:0] $end
$var wire 1 < s0 $end
$var wire 32 6" out [31:0] $end
$upscope $end
$scope module sext $end
$var wire 16 7" in1 [15:0] $end
$var wire 32 8" out1 [31:0] $end
$upscope $end
$scope module shift2 $end
$var wire 32 9" shin [31:0] $end
$var wire 32 :" shout [31:0] $end
$upscope $end
$scope module shift2jump $end
$var wire 26 ;" shin [25:0] $end
$var wire 28 <" shout [27:0] $end
$upscope $end
$scope module zext $end
$var wire 16 =" in1 [15:0] $end
$var wire 32 >" out1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1011 >"
b1011 ="
b100101000000000000000101100 <"
b1001010000000000000001011 ;"
b101100 :"
b1011 9"
b1011 8"
b1011 7"
b11111111111111111111111111111110 6"
b11111111111111111111111111111110 5"
b100010001 4"
b100010001 3"
b10001000000000000 2"
b100010001 1"
b1011 0"
b0 /"
b0 ."
b1000 -"
b0 ,"
b1000 +"
b100 *"
b110000 )"
b100 ("
0'"
0&"
0%"
0$"
b10000 #"
b1011 ""
0!"
b100010001 ~
b100010001 }
0|
b100 {
b100 z
0y
b100010001 x
b100 w
b100 v
0u
b110000 t
b100 s
b1000 r
b1000 q
b11111 p
b100 o
b100 n
0m
b100101000000000000000101100 l
b100010001 k
b0 j
bx i
b0 h
b10 g
b100010001 f
b101100 e
b110000 d
b100 c
b100 b
b100 a
b0 `
b10 _
0^
1]
0\
1[
1Z
b11111 Y
bx X
b0 W
0V
b100 U
b110000 T
0S
0R
0Q
0P
0O
0N
0M
0L
b10001000000000000 K
b1011 J
b1011 I
b10 H
b1011 G
b0 F
b1000 E
b1001010000000000000001011 D
b1001 C
b10000 B
b1000001001010000000000000001011 A
0@
0?
0>
0=
1<
b1000 ;
b0 :
b100010001 9
b100 8
b1000 7
b100 6
b100 5
b100010001 4
b100 3
b11111111111111111111111111111110 2
01
10
b101100 /
b100101000000000000000101100 .
b100101000000000000000101100 -
b0 ,
0+
b100010001 *
b1011 )
0(
0'
b11111111111111111111111111111110 &
b0 %
b100010001 $
bx #
1"
0!
$end
#5
1!
b100000 #
0"
#10
0!
#15
1!
#20
b100001111 4
b100001111 }
b100001111 4"
b100001111 9
b100001111 ~
b100001111 3"
b1 K
b1 2"
b100001111 *
b100001111 k
b100001111 1"
b11111111111111111111111111111110 :
b11111111111111111111111111111110 h
b11111111111111111111111111111110 /"
b11111111111111111111111111111110 %
b11111111111111111111111111111110 ."
0!
1V
#25
1!
#30
0!
#35
1!
#40
xu
x'
xO
xQ
xM
xS
x!"
xm
xy
x>
x?
x%"
x=
x&"
x|
xN
xP
xL
x$"
x@
x0
x<
bx 4
bx }
bx 4"
bx 2
bx 6"
x+
bx 9
bx ~
bx 3"
bx K
bx 2"
bx 7
bx q
b1111111111111111xxxxxxxxxxxxxxxx &
b1111111111111111xxxxxxxxxxxxxxxx 5"
bx 3
bx *"
bx0 ,
bx0 j
x(
bx *
bx k
bx 1"
bx :
bx h
bx /"
bx ;
bx r
bx -"
bx00 /
bx00 e
bx00 :"
bx 5
bx z
bx ("
bx B
xR
x1
x'"
bx #"
bx $
bx f
bx x
bx C
bx %
bx ."
bx E
bx +"
bx F
bx ,"
bx G
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 -
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 l
bx00 .
bx00 <"
bx D
bx ;"
bx I
bx ""
b0xxxxxxxxxxxxxxxx )
b0xxxxxxxxxxxxxxxx >"
bx ="
bx J
bx 0"
bx 8"
bx 9"
bx 7"
x^
x]
x\
x[
xZ
bx 8
bx n
bx w
bx A
bx 6
bx o
bx v
0!
0V
bx T
bx d
bx t
bx )"
b1000 U
b1000 b
b1000 c
b1000 s
b1000 {
b100 W
b100 `
#45
1!
#50
0!
#55
1!
#60
0!
1V
#65
1!
#70
0!
#75
1!
#80
0!
0V
bx U
bx b
bx c
bx s
bx {
bx W
bx `
#85
1!
#90
0!
#95
1!
#100
0!
1V
#105
1!
#110
0!
#115
1!
#120
0!
0V
#125
1!
#130
0!
#135
1!
#140
0!
1V
#145
1!
#150
0!
#155
1!
#160
0!
0V
#165
1!
#170
0!
#175
1!
#180
0!
1V
#185
1!
#190
0!
#195
1!
#200
0!
0V
#205
1!
#210
0!
#215
1!
#220
0!
1V
#225
1!
#230
0!
#235
1!
#240
0!
0V
#245
1!
#250
0!
#255
1!
#260
0!
1V
#265
1!
#270
0!
#275
1!
#280
0!
0V
#285
1!
#290
0!
#295
1!
#300
0!
1V
#305
1!
#310
0!
#315
1!
#320
0!
0V
#325
1!
#330
0!
#335
1!
#340
0!
1V
#345
1!
#350
0!
#355
1!
#360
0!
0V
#365
1!
#370
0!
#375
1!
#380
0!
1V
#385
1!
#390
0!
#395
1!
b100000 #
#400
0!
0V
